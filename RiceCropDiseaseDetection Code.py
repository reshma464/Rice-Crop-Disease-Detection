# -*- coding: utf-8 -*-
"""majorproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUYCS1IL-Nl-li0kDMKaWNEOvQWS5rav
"""

from tensorflow.keras.layers import Input,Lambda,Dense,Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
import numpy as np

import matplotlib.pyplot as plt

IMAGE_SIZE = [224,224]

train_path = "/content/sample_data/train"

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255,horizontal_flip=True,zoom_range=0.2,validation_split=0.15)

training_set = train_datagen.flow_from_directory(
        train_path,target_size=(224,224), batch_size=32,class_mode='categorical',
        subset='training')

validation_set = train_datagen.flow_from_directory(
        train_path,target_size=(224,224), batch_size=32,class_mode='categorical',shuffle = True,
        subset='validation')

"""# New Section"""

from tensorflow.keras.applications import VGG19
from tensorflow.keras.layers import GlobalAveragePooling2D,Dropout



mv = VGG19(input_shape=IMAGE_SIZE+[3],weights='imagenet',include_top=False)

for layers in mv.layers:
    layers.trainable = False

x = Flatten()(mv.output)
prediction = Dense(4,activation='softmax')(x)

model = Model(inputs=mv.input,outputs=prediction)

model.summary()

import tensorflow as tf
class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self,epoch,logs={}):
        if(logs.get('loss')<=0.05):
            print("\nEnding training")
            self.model.stop_training = True

callback = [myCallback()]

from tensorflow.keras.optimizers import Adam 

model.compile(optimizer=Adam(lr=0.0001),loss='categorical_crossentropy',metrics=['categorical_accuracy'])

history = model.fit(training_set,validation_data=validation_set,steps_per_epoch=len(training_set),
                    epochs=50,verbose=1,
                    callbacks=callback
                    )

acc = history.history['categorical_accuracy']
val_acc = history.history['val_categorical_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

import matplotlib.pyplot as plt
plt.plot(epochs,acc)
plt.plot(epochs,val_acc)
plt.title("Training and validation Accuracy")
plt.figure()

plt.plot(epochs,loss)
plt.plot(epochs,val_loss)
plt.title("Training and validation Loss")
plt.figure()

model.save('/content/sample_data/rice.h5')

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

img_width, img_height = 224,224
model = load_model('/content/sample_data/rice.h5')

img = image.load_img('/content/sample_data/4.JPG', target_size=(img_width, img_height))
x = image.img_to_array(img)
y = np.expand_dims(x, axis=0)

classes = model.predict(y)
print (classes)

result = np.argmax(model.predict(y))
print(result)
if result == 1:
  print("Bacterial_leaf_Blight")
if result == 2:
  print("Blast")
if result == 3:
  print("Brownspot")